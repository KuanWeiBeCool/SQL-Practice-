-- Note how to use PARTITION BY clause -> very useful to separate groups. 
-- Also, note that PARTITION BY will not delete duplicates. So we need a subquery to select only distinct values. 

SELECT D.Name Department, E.Name Employee, E.Salary
FROM Employee E INNER JOIN Department D ON E.DepartmentId = D.Id
INNER JOIN
(SELECT DISTINCT * FROM
(SELECT Salary, DepartmentId, ROW_NUMBER() OVER (PARTITION BY DepartmentId ORDER BY Salary DESC) SalaryRank FROM
(SELECT DISTINCT Salary, DepartmentId FROM Employee) Temp1) Temp2 WHERE SalaryRank <=3) Temp3
ON E.DepartmentId = Temp3.DepartmentId WHERE E.Salary = Temp3.Salary


-- Instead of using ROW_NUMBER(), we can use DENSE_RANK, which only increments when having another distinct value. Be sure to use DISTINCT. 

SELECT D.Name Department, E.Name Employee, E.Salary
FROM Employee E INNER JOIN Department D ON E.DepartmentId = D.Id
INNER JOIN
(SELECT DISTINCT * FROM
(SELECT Salary, DepartmentId, DENSE_RANK() OVER (PARTITION BY DepartmentId ORDER BY Salary DESC) SalaryRank FROM Employee) Temp1 WHERE SalaryRank <=3) Temp3
ON E.DepartmentId = Temp3.DepartmentId WHERE E.Salary = Temp3.Salary


-- Leetcode solution

A top 3 salary in this company means there is no more than 3 salary bigger than itself in the company:

select e1.Name as 'Employee', e1.Salary
from Employee e1
where 3 >
(
    select count(distinct e2.Salary)
    from Employee e2
    where e2.Salary > e1.Salary
)
;

Then, we need to join the Employee table with Department in order to retrieve the department information.

SELECT
    d.Name AS 'Department', e1.Name AS 'Employee', e1.Salary
FROM
    Employee e1
        JOIN
    Department d ON e1.DepartmentId = d.Id
WHERE
    3 > (SELECT
            COUNT(DISTINCT e2.Salary)
        FROM
            Employee e2
        WHERE
            e2.Salary > e1.Salary
                AND e1.DepartmentId = e2.DepartmentId
        )
;
